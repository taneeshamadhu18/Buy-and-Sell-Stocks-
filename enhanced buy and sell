#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <iomanip>

using namespace std;

class Stock {
public:
    string symbol;
    double price;

    Stock() : symbol(""), price(0.0) {}
    Stock(string s, double p) : symbol(s), price(p) {}
};

class Transaction {
public:
    string type; // "Buy" or "Sell"
    string symbol;
    int quantity;
    double price;
    double total;

    Transaction(string t, string s, int q, double p)
        : type(t), symbol(s), quantity(q), price(p), total(q * p) {}
};

class Portfolio {
private:
    map<string, pair<int, double>> holdings; // <Stock Symbol, <Quantity, Average Price>>
    vector<Transaction> history; // Transaction history
    double balance;

public:
    Portfolio() : balance(10000.0) {}

    void buyStock(const Stock& stock, int quantity) {
        double totalCost = stock.price * quantity;
        if (totalCost > balance) {
            cout << "Insufficient balance to buy " << quantity << " of " << stock.symbol << ".\n";
            return;
        }
        balance -= totalCost;

        if (holdings.find(stock.symbol) != holdings.end()) {
            int currentQuantity = holdings[stock.symbol].first;
            double averagePrice = holdings[stock.symbol].second;
            averagePrice = (averagePrice * currentQuantity + stock.price * quantity) / (currentQuantity + quantity);
            holdings[stock.symbol] = {currentQuantity + quantity, averagePrice};
        } else {
            holdings[stock.symbol] = {quantity, stock.price};
        }
        
        history.push_back(Transaction("Buy", stock.symbol, quantity, stock.price));
        cout << "Bought " << quantity << " of " << stock.symbol << " for $" << totalCost << ". New balance: $" << balance << ".\n";
    }

    void sellStock(const Stock& stock, int quantity) {
        if (holdings.find(stock.symbol) == holdings.end() || holdings[stock.symbol].first < quantity) {
            cout << "Not enough shares of " << stock.symbol << " to sell.\n";
            return;
        }
        int currentQuantity = holdings[stock.symbol].first;
        holdings[stock.symbol].first -= quantity;
        double totalRevenue = stock.price * quantity;
        balance += totalRevenue;
        
        history.push_back(Transaction("Sell", stock.symbol, quantity, stock.price));
        cout << "Sold " << quantity << " of " << stock.symbol << " for $" << totalRevenue << ". New balance: $" << balance << ".\n";

        if (holdings[stock.symbol].first == 0) {
            holdings.erase(stock.symbol);
        }
    }

    void showPortfolio() const {
        cout << "\nCurrent Portfolio:\n";
        if (holdings.empty()) {
            cout << "No stocks in the portfolio.\n";
            return;
        }
        for (const auto& entry : holdings) {
            cout << "Stock: " << entry.first
                 << ", Quantity: " << entry.second.first
                 << ", Average Price: $" << fixed << setprecision(2) << entry.second.second << "\n";
        }
        cout << "Balance: $" << fixed << setprecision(2) << balance << "\n";
    }

    void showTransactionHistory() const {
        cout << "\nTransaction History:\n";
        if (history.empty()) {
            cout << "No transactions made yet.\n";
            return;
        }
        for (const auto& txn : history) {
            cout << txn.type << " " << txn.quantity << " of " << txn.symbol 
                 << " at $" << fixed << setprecision(2) << txn.price 
                 << " each, Total: $" << txn.total << "\n";
        }
    }

    void updateStockPrice(const string& symbol, double newPrice) {
        if (holdings.find(symbol) == holdings.end()) {
            cout << "Stock symbol not found in portfolio.\n";
            return;
        }
        for (auto& entry : holdings) {
            if (entry.first == symbol) {
                entry.second.second = newPrice; // Update average price
                cout << "Updated price of " << symbol << " to $" << newPrice << ".\n";
                return;
            }
        }
    }

    double getNetWorth() const {
        double netWorth = balance;
        for (const auto& entry : holdings) {
            netWorth += entry.second.first * entry.second.second; // Add value of stocks
        }
        return netWorth;
    }
};

void showMenu() {
    cout << "\nStock Trading System\n";
    cout << "1. Buy Stock\n";
    cout << "2. Sell Stock\n";
    cout << "3. View Portfolio\n";
    cout << "4. View Transaction History\n";
    cout << "5. Update Stock Price\n";
    cout << "6. View Net Worth\n";
    cout << "7. Exit\n";
}

int main() {
    Portfolio portfolio;
    map<string, Stock> stockMarket = {
        {"AAPL", Stock("AAPL", 175.23)},
        {"GOOGL", Stock("GOOGL", 2835.46)},
        {"MSFT", Stock("MSFT", 310.75)},
        {"TSLA", Stock("TSLA", 735.46)},
        {"AMZN", Stock("AMZN", 3472.75)}
    };

    while (true) {
        showMenu();
        int choice;
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            string symbol;
            int quantity;
            cout << "Enter the stock symbol to buy: ";
            cin >> symbol;
            if (stockMarket.find(symbol) == stockMarket.end()) {
                cout << "Invalid stock symbol.\n";
                continue;
            }
            cout << "Enter quantity to buy: ";
            cin >> quantity;
            if (quantity <= 0) {
                cout << "Quantity must be greater than zero.\n";
                continue;
            }
            portfolio.buyStock(stockMarket[symbol], quantity);
        } else if (choice == 2) {
            string symbol;
            int quantity;
            cout << "Enter the stock symbol to sell: ";
            cin >> symbol;
            if (stockMarket.find(symbol) == stockMarket.end()) {
                cout << "Invalid stock symbol.\n";
                continue;
            }
            cout << "Enter quantity to sell: ";
            cin >> quantity;
            if (quantity <= 0) {
                cout << "Quantity must be greater than zero.\n";
                continue;
            }
            portfolio.sellStock(stockMarket[symbol], quantity);
        } else if (choice == 3) {
            portfolio.showPortfolio();
        } else if (choice == 4) {
            portfolio.showTransactionHistory();
        } else if (choice == 5) {
            string symbol;
            double newPrice;
            cout << "Enter the stock symbol to update: ";
            cin >> symbol;
            cout << "Enter new price: ";
            cin >> newPrice;
            portfolio.updateStockPrice(symbol, newPrice);
        } else if (choice == 6) {
            cout << "Net Worth: $" << fixed << setprecision(2) << portfolio.getNetWorth() << "\n";
        } else if (choice == 7) {
            cout << "Exiting the system.\n";
            break;
        } else {
            cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
